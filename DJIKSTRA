from collections import defaultdict

class AdjacencyListGraph:
    def __init__(self):
        self.vertices: set[str] = set()
        self.adjacency_list: defaultdict[str, list[tuple[str, int]]] = defaultdict(list)

    def add_vertex(self, vertex: str) -> bool:
        if vertex not in self.vertices:
            self.vertices.add(vertex)
            return True
        return False

    def add_edge(self, vertex1: str, vertex2: str, weight: int = 1) -> bool:
        if vertex1 in self.vertices and vertex2 in self.vertices:
            self.adjacency_list[vertex1].append((vertex2, weight))
            self.adjacency_list[vertex2].append((vertex1, weight))  # for undirected graph
            return True
        return False

    def display_graph(self) -> None:
        for vertex in self.vertices:
            print(vertex, "->", self.adjacency_list[vertex])

# Create a graph
graph = AdjacencyListGraph()

# Add vertices
graph.add_vertex("Surabaya")
graph.add_vertex("Sidoarjo")
graph.add_vertex("Pasuruhan")
graph.add_vertex("Probolinggo")
graph.add_vertex("Malang")
graph.add_vertex("Batu")
graph.add_vertex("Blitar")
graph.add_vertex("Tulungagung")
graph.add_vertex("Trenggalek")
graph.add_vertex("Ponorogo")
graph.add_vertex("Madiun")
graph.add_vertex("Magetan")
graph.add_vertex("Ngawi")
graph.add_vertex("Nganjuk")
graph.add_vertex("Kediri")

# Add edges with weights
# Add edges with weights
graph.add_edge("Surabaya", "Sidoarjo", 32)
graph.add_edge("Surabaya", "Pasuruhan", 69)
graph.add_edge("Surabaya", "Probolinggo", 102)
graph.add_edge("Surabaya", "Malang", 95)
graph.add_edge("Surabaya", "Batu", 104)
graph.add_edge("Surabaya", "Blitar", 164)
graph.add_edge("Surabaya", "Tulungagung", 155)
graph.add_edge("Surabaya", "Trenggalek", 176)
graph.add_edge("Surabaya", "Ponorogo", 194)
graph.add_edge("Surabaya", "Madiun", 165)
graph.add_edge("Surabaya", "Magetan", 189)
graph.add_edge("Surabaya", "Ngawi", 182)
graph.add_edge("Surabaya", "Nganjuk", 116)
graph.add_edge("Surabaya", "Kediri", 124)

#... (rest of the edges)

#... (rest of the edges)

# Display the graph
graph.display_graph()
